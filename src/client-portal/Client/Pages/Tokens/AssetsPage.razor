@page "/assets"

@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.False">
    <div class="d-flex">
        <MudHidden Breakpoint="Breakpoint.SmAndUp">
            <MudText Class="mr-2 align-self-center" Typo="Typo.h5" Color="Color.Primary" GutterBottom="false">Assets/Tokens</MudText>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.Xs">
            <MudText Class="mr-4 align-self-center" Typo="Typo.h4" Color="Color.Primary" GutterBottom="false">Assets/Tokens</MudText>
        </MudHidden>

        @if (IsLoaded)
        {
            <MudMenu AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                <ActivatorContent>
                    <MudIconButton Class="align-self-center" Icon="@Icons.Material.Filled.Add" Color="Color.Secondary" Variant="Variant.Filled" Size="Size.Small" />
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem OnClick="InvokeCreateTokenModalAsync">Create New Token</MudMenuItem>
                    <MudMenuItem OnClick="InvokeAddTokenModalAsync">Add Exisitng Token</MudMenuItem>
                </ChildContent>
            </MudMenu>
        }

        @if (IsCompletelyLoaded)
        {
            <MudIconButton Class="align-self-center mx-1" Icon="@Icons.Material.Filled.Refresh" Color="Color.Secondary" Variant="Variant.Filled" Size="Size.Small" OnClick="FetchBalanceAsync" />
        }
    </div>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
    @if (!IsLoaded)
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="56px" Width="100%" />
        <MudSkeleton Class="mt-2" SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="280px" Width="100%" />
    }
    else
    {
        <MudPaper Square="true" Elevation="10">
            <MudTable Items="@TokenInfoWithBalanceList" Class="mx-0 grey darken-4" FixedHeader="true" Breakpoint="Breakpoint.Sm">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Issuer</MudTh>
                    <MudTh>Total Supply</MudTh>
                    <MudTh>@MainChain Chain Supply</MudTh>
                    <MudTh>@SideChain Chain Supply</MudTh>
                    <MudTh>@MainChain Chain Balance</MudTh>
                    <MudTh>@SideChain Chain Balance</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">
                        <MudText Typo="Typo.body1" Color="Color.Primary">
                            <b>@context.TokenName (@context.Symbol)</b>
                        </MudText>
                        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                            <MudText Typo="Typo.caption">
                                <span>[@context.Decimals] [@context.IssueChainIdBase58]</span>
                            </MudText>
                        </MudHidden>
                    </MudTd>
                    <MudTd DataLabel="Issuer">
                        <span>
                            <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                                @context.Issuer.ToStringAddress().ToMask(6)
                            </MudHidden>
                            <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                                @context.Issuer.ToStringAddress().ToMask(10)
                            </MudHidden>

                            @if (WalletAddress == @context.Issuer.ToStringAddress())
                            {
                            <span> (You)</span>
                            }
                    </span>
                </MudTd>
                <MudTd DataLabel="Total Supply">
                    @context.TotalSupply.ToAmountDisplay(@context.Decimals)
                </MudTd>
                <MudTd DataLabel="@(string.Concat(MainChain, " Chain Supply"))">
                    @if (!@context.MainChainSupply.HasValue)
                        {
                        <MudSkeleton Height="20px" Width="100px" Animation="Animation.Wave" SkeletonType="SkeletonType.Rectangle" />
                        }
                        else
                        {
                        <span>
                            @context.MainChainSupply.Value.ToAmountDisplay(@context.Decimals)
                        </span>
                        }
                </MudTd>
                <MudTd DataLabel="@(string.Concat(SideChain," Chain Supply"))">
                    @if (!@context.SideChainSupply.HasValue)
                        {
                        <MudSkeleton Height="20px" Width="100px" Animation="Animation.Wave" SkeletonType="SkeletonType.Rectangle" />
                        }
                        else
                        {
                        <span>
                            @context.SideChainSupply.Value.ToAmountDisplay(@context.Decimals)
                        </span>
                        }
                </MudTd>
                <MudTd DataLabel="@(string.Concat(MainChain, " Chain Balance"))">
                    @if (!@context.MainChainBalance.HasValue)
                        {
                        <MudSkeleton Height="20px" Width="100px" Animation="Animation.Wave" SkeletonType="SkeletonType.Rectangle" />
                        }
                        else
                        {
                        <span>@context.MainChainBalance.Value.ToAmountDisplay(@context.Decimals) @context.Symbol</span>
                        }
                </MudTd>
                <MudTd DataLabel="@(string.Concat(SideChain, " Chain Balance"))">
                    @if (!@context.SideChainBalance.HasValue)
                        {
                        <MudSkeleton Height="20px" Width="100px" Animation="Animation.Wave" SkeletonType="SkeletonType.Rectangle" />
                        }
                        else
                        {
                        <span>@context.SideChainBalance.Value.ToAmountDisplay(@context.Decimals) @context.Symbol</span>
                        }
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudMenu Variant="Variant.Filled" Color="Color.Primary" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" DisableElevation="true" Icon="@Icons.Filled.MoreVert" IconColor="Color.Secondary" Direction="Direction.Left" OffsetX="true">
                        <MudMenuItem Disabled="context.IsNative" OnClick="(() => InvokeRemoveFromList(context))">Remove from List</MudMenuItem>
                        <MudMenuItem Disabled="WalletAddress != context.Issuer.ToStringAddress()" OnClick="(() => InvokeIssueTokenModalAsync(context))">Issue New Token</MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
    }
</MudContainer>
